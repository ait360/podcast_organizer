# Generated by Django 4.0 on 2021-12-20 10:18

import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import podcasts.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0003_alter_profile_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(error_messages={'unique': 'A users with that username already exists.'}, help_text='Required for your channels url. 150 characters or fewer.                    Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(max_length=200, verbose_name='channel name')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField()),
                ('website', models.URLField(blank=True, help_text='add your website to allow your                               subscribesrs know more about you', validators=[django.core.validators.URLValidator()], verbose_name='webiste')),
                ('email', models.EmailField(help_text='add your email address to allow your                                     subscribers reach you', max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('display_picture', models.ImageField(default='channel_picture.jpg', upload_to=podcasts.models.channel_display_path, verbose_name='display picture')),
                ('cover_picture', models.ImageField(default='cover_picture.jpeg', upload_to=podcasts.models.channel_cover_path, verbose_name='cover picture')),
                ('explicit', models.BooleanField(verbose_name='family friendly ? ')),
                ('slug', models.SlugField(unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('hosts', models.ManyToManyField(related_name='channels', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'channels',
                'verbose_name_plural': 'Channels',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=250, verbose_name='Episode title')),
                ('image', models.ImageField(upload_to=podcasts.models.episode_path, verbose_name='episode image')),
                ('season', models.IntegerField(blank=True, verbose_name='Season number')),
                ('number', models.IntegerField(verbose_name='Episode number')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField()),
                ('kind', models.CharField(choices=[('full', 'full'), ('bonus', 'bonus'), ('trailer', 'trailer')], help_text='full, bonus, trailer', max_length=7, verbose_name='Episode type')),
                ('episode', models.FileField(error_messages={'invalid': 'your file format is unsupported'}, help_text='it should be a mp3 file', upload_to='', validators=[django.core.validators.FileExtensionValidator(['mp3'])], verbose_name='Episode Audio')),
                ('explicit', models.BooleanField(verbose_name='family friendly ? ')),
                ('guest', models.CharField(blank=True, max_length=300)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episode', to='podcasts.channel')),
            ],
            options={
                'verbose_name': 'Episode',
                'verbose_name_plural': 'Episodes',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscribed', models.BooleanField()),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chn_subscribers', to='podcasts.channel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_subscribers', to='users.user')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liked', models.BooleanField()),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='epi_likes', to='podcasts.episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_likes', to='users.user')),
            ],
        ),
        migrations.AddField(
            model_name='episode',
            name='likes',
            field=models.ManyToManyField(related_name='likes', through='podcasts.Like', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='channel',
            name='subscribers',
            field=models.ManyToManyField(related_name='subscribers', through='podcasts.Subscriber', to=settings.AUTH_USER_MODEL),
        ),
    ]
